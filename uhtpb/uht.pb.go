// Code generated by protoc-gen-go. DO NOT EDIT.
// source: uht.proto

package uhtpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import reflexpb "github.com/luno/reflex/reflexpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RoundStatus int32

const (
	RoundStatus_ROUND_STATUS_UNKNOWN   RoundStatus = 0
	RoundStatus_ROUND_STATUS_JOIN      RoundStatus = 1
	RoundStatus_ROUND_STATUS_JOINED    RoundStatus = 2
	RoundStatus_ROUND_STATUS_COLLECT   RoundStatus = 3
	RoundStatus_ROUND_STATUS_COLLECTED RoundStatus = 4
	RoundStatus_ROUND_STATUS_SUBMIT    RoundStatus = 5
	RoundStatus_ROUND_STATUS_SUBMITTED RoundStatus = 6
	RoundStatus_ROUND_STATUS_SUCCESS   RoundStatus = 7
	RoundStatus_ROUND_STATUS_FAILED    RoundStatus = 8
	RoundStatus_ROUND_STATUS_SENTINEL  RoundStatus = 9
)

var RoundStatus_name = map[int32]string{
	0: "ROUND_STATUS_UNKNOWN",
	1: "ROUND_STATUS_JOIN",
	2: "ROUND_STATUS_JOINED",
	3: "ROUND_STATUS_COLLECT",
	4: "ROUND_STATUS_COLLECTED",
	5: "ROUND_STATUS_SUBMIT",
	6: "ROUND_STATUS_SUBMITTED",
	7: "ROUND_STATUS_SUCCESS",
	8: "ROUND_STATUS_FAILED",
	9: "ROUND_STATUS_SENTINEL",
}
var RoundStatus_value = map[string]int32{
	"ROUND_STATUS_UNKNOWN":   0,
	"ROUND_STATUS_JOIN":      1,
	"ROUND_STATUS_JOINED":    2,
	"ROUND_STATUS_COLLECT":   3,
	"ROUND_STATUS_COLLECTED": 4,
	"ROUND_STATUS_SUBMIT":    5,
	"ROUND_STATUS_SUBMITTED": 6,
	"ROUND_STATUS_SUCCESS":   7,
	"ROUND_STATUS_FAILED":    8,
	"ROUND_STATUS_SENTINEL":  9,
}

func (x RoundStatus) String() string {
	return proto.EnumName(RoundStatus_name, int32(x))
}
func (RoundStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_uht_db328afbe4c0f94c, []int{0}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_uht_db328afbe4c0f94c, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Round struct {
	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MatchId              int64                `protobuf:"varint,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Index                int64                `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Team                 string               `protobuf:"bytes,4,opt,name=team,proto3" json:"team,omitempty"`
	Status               RoundStatus          `protobuf:"varint,5,opt,name=status,proto3,enum=uhtpb.RoundStatus" json:"status,omitempty"`
	State                *RoundState          `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Error                string               `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Round) Reset()         { *m = Round{} }
func (m *Round) String() string { return proto.CompactTextString(m) }
func (*Round) ProtoMessage()    {}
func (*Round) Descriptor() ([]byte, []int) {
	return fileDescriptor_uht_db328afbe4c0f94c, []int{1}
}
func (m *Round) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Round.Unmarshal(m, b)
}
func (m *Round) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Round.Marshal(b, m, deterministic)
}
func (dst *Round) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Round.Merge(dst, src)
}
func (m *Round) XXX_Size() int {
	return xxx_messageInfo_Round.Size(m)
}
func (m *Round) XXX_DiscardUnknown() {
	xxx_messageInfo_Round.DiscardUnknown(m)
}

var xxx_messageInfo_Round proto.InternalMessageInfo

func (m *Round) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Round) GetMatchId() int64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *Round) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Round) GetTeam() string {
	if m != nil {
		return m.Team
	}
	return ""
}

func (m *Round) GetStatus() RoundStatus {
	if m != nil {
		return m.Status
	}
	return RoundStatus_ROUND_STATUS_UNKNOWN
}

func (m *Round) GetState() *RoundState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Round) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Round) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Round) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type RoundState struct {
	Players              []*RoundPlayerState `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RoundState) Reset()         { *m = RoundState{} }
func (m *RoundState) String() string { return proto.CompactTextString(m) }
func (*RoundState) ProtoMessage()    {}
func (*RoundState) Descriptor() ([]byte, []int) {
	return fileDescriptor_uht_db328afbe4c0f94c, []int{2}
}
func (m *RoundState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundState.Unmarshal(m, b)
}
func (m *RoundState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundState.Marshal(b, m, deterministic)
}
func (dst *RoundState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundState.Merge(dst, src)
}
func (m *RoundState) XXX_Size() int {
	return xxx_messageInfo_RoundState.Size(m)
}
func (m *RoundState) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundState.DiscardUnknown(m)
}

var xxx_messageInfo_RoundState proto.InternalMessageInfo

func (m *RoundState) GetPlayers() []*RoundPlayerState {
	if m != nil {
		return m.Players
	}
	return nil
}

type RoundPlayerState struct {
	Name                 string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Rank                 int32            `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Parts                map[string]int32 `protobuf:"bytes,3,rep,name=parts,proto3" json:"parts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Included             bool             `protobuf:"varint,4,opt,name=included,proto3" json:"included,omitempty"`
	Collected            bool             `protobuf:"varint,5,opt,name=collected,proto3" json:"collected,omitempty"`
	Submitted            bool             `protobuf:"varint,6,opt,name=submitted,proto3" json:"submitted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RoundPlayerState) Reset()         { *m = RoundPlayerState{} }
func (m *RoundPlayerState) String() string { return proto.CompactTextString(m) }
func (*RoundPlayerState) ProtoMessage()    {}
func (*RoundPlayerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_uht_db328afbe4c0f94c, []int{3}
}
func (m *RoundPlayerState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundPlayerState.Unmarshal(m, b)
}
func (m *RoundPlayerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundPlayerState.Marshal(b, m, deterministic)
}
func (dst *RoundPlayerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundPlayerState.Merge(dst, src)
}
func (m *RoundPlayerState) XXX_Size() int {
	return xxx_messageInfo_RoundPlayerState.Size(m)
}
func (m *RoundPlayerState) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundPlayerState.DiscardUnknown(m)
}

var xxx_messageInfo_RoundPlayerState proto.InternalMessageInfo

func (m *RoundPlayerState) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoundPlayerState) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *RoundPlayerState) GetParts() map[string]int32 {
	if m != nil {
		return m.Parts
	}
	return nil
}

func (m *RoundPlayerState) GetIncluded() bool {
	if m != nil {
		return m.Included
	}
	return false
}

func (m *RoundPlayerState) GetCollected() bool {
	if m != nil {
		return m.Collected
	}
	return false
}

func (m *RoundPlayerState) GetSubmitted() bool {
	if m != nil {
		return m.Submitted
	}
	return false
}

func init() {
	proto.RegisterType((*Empty)(nil), "uhtpb.Empty")
	proto.RegisterType((*Round)(nil), "uhtpb.Round")
	proto.RegisterType((*RoundState)(nil), "uhtpb.RoundState")
	proto.RegisterType((*RoundPlayerState)(nil), "uhtpb.RoundPlayerState")
	proto.RegisterMapType((map[string]int32)(nil), "uhtpb.RoundPlayerState.PartsEntry")
	proto.RegisterEnum("uhtpb.RoundStatus", RoundStatus_name, RoundStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UhtClient is the client API for Uht service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UhtClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Stream(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (Uht_StreamClient, error)
}

type uhtClient struct {
	cc *grpc.ClientConn
}

func NewUhtClient(cc *grpc.ClientConn) UhtClient {
	return &uhtClient{cc}
}

func (c *uhtClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/uhtpb.Uht/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uhtClient) Stream(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (Uht_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Uht_serviceDesc.Streams[0], "/uhtpb.Uht/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &uhtStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Uht_StreamClient interface {
	Recv() (*reflexpb.Event, error)
	grpc.ClientStream
}

type uhtStreamClient struct {
	grpc.ClientStream
}

func (x *uhtStreamClient) Recv() (*reflexpb.Event, error) {
	m := new(reflexpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UhtServer is the server API for Uht service.
type UhtServer interface {
	Ping(context.Context, *Empty) (*Empty, error)
	Stream(*reflexpb.StreamRequest, Uht_StreamServer) error
}

func RegisterUhtServer(s *grpc.Server, srv UhtServer) {
	s.RegisterService(&_Uht_serviceDesc, srv)
}

func _Uht_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UhtServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uhtpb.Uht/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UhtServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uht_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(reflexpb.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UhtServer).Stream(m, &uhtStreamServer{stream})
}

type Uht_StreamServer interface {
	Send(*reflexpb.Event) error
	grpc.ServerStream
}

type uhtStreamServer struct {
	grpc.ServerStream
}

func (x *uhtStreamServer) Send(m *reflexpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Uht_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uhtpb.Uht",
	HandlerType: (*UhtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Uht_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Uht_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "uht.proto",
}

func init() { proto.RegisterFile("uht.proto", fileDescriptor_uht_db328afbe4c0f94c) }

var fileDescriptor_uht_db328afbe4c0f94c = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0xed, 0x38, 0x89, 0xa7, 0xa8, 0xb8, 0x4b, 0x4b, 0x5d, 0x0b, 0x89, 0xc8, 0x42, 0x22,
	0xaa, 0x90, 0x03, 0x41, 0x42, 0x85, 0x0b, 0x0a, 0x89, 0x91, 0x02, 0xc1, 0xa9, 0xd6, 0x89, 0x38,
	0x46, 0x8e, 0xbd, 0x4d, 0xac, 0xfa, 0x0b, 0x7b, 0x5d, 0x35, 0x7f, 0x80, 0x33, 0x7f, 0x88, 0xff,
	0x86, 0xbc, 0xeb, 0x34, 0x6d, 0x0d, 0xe2, 0x94, 0x99, 0xf7, 0xde, 0xcc, 0xcb, 0xcc, 0x78, 0x41,
	0x29, 0xd6, 0xd4, 0x4c, 0xb3, 0x84, 0x26, 0x48, 0x2e, 0xd6, 0x34, 0x5d, 0xea, 0xcf, 0x57, 0x49,
	0xb2, 0x0a, 0x49, 0x8f, 0x81, 0xcb, 0xe2, 0xb2, 0x47, 0x83, 0x88, 0xe4, 0xd4, 0x8d, 0x52, 0xae,
	0xd3, 0x5f, 0xad, 0x02, 0xba, 0x2e, 0x96, 0xa6, 0x97, 0x44, 0xbd, 0xb0, 0x88, 0x93, 0x5e, 0x46,
	0x2e, 0x43, 0x72, 0x53, 0xfd, 0xa4, 0xcb, 0x2a, 0xe0, 0x6a, 0xa3, 0x05, 0xb2, 0x15, 0xa5, 0x74,
	0x63, 0xfc, 0x16, 0x41, 0xc6, 0x49, 0x11, 0xfb, 0xe8, 0x00, 0xc4, 0xc0, 0xd7, 0x84, 0x8e, 0xd0,
	0x95, 0xb0, 0x18, 0xf8, 0xe8, 0x14, 0xda, 0x91, 0x4b, 0xbd, 0xf5, 0x22, 0xf0, 0x35, 0x91, 0xa1,
	0x2d, 0x96, 0x8f, 0x7d, 0x74, 0x04, 0x72, 0x10, 0xfb, 0xe4, 0x46, 0x93, 0x18, 0xce, 0x13, 0x84,
	0xa0, 0x41, 0x89, 0x1b, 0x69, 0x8d, 0x8e, 0xd0, 0x55, 0x30, 0x8b, 0xd1, 0x19, 0x34, 0x73, 0xea,
	0xd2, 0x22, 0xd7, 0xe4, 0x8e, 0xd0, 0x3d, 0xe8, 0x23, 0x93, 0x8d, 0x63, 0x32, 0x4b, 0x87, 0x31,
	0xb8, 0x52, 0xa0, 0x97, 0x20, 0x97, 0x11, 0xd1, 0x9a, 0x1d, 0xa1, 0xbb, 0xdf, 0x3f, 0x7c, 0x28,
	0x25, 0x98, 0xf3, 0xa5, 0x3d, 0xc9, 0xb2, 0x24, 0xd3, 0x5a, 0xcc, 0x89, 0x27, 0xe8, 0x3d, 0x80,
	0x97, 0x11, 0x97, 0x12, 0x7f, 0xe1, 0x52, 0xad, 0xcd, 0x7a, 0xe8, 0x26, 0x5f, 0x9b, 0xb9, 0x5d,
	0x9b, 0x39, 0xdb, 0xae, 0x0d, 0x2b, 0x95, 0x7a, 0x40, 0xcb, 0xd2, 0x22, 0xf5, 0xb7, 0xa5, 0xca,
	0xff, 0x4b, 0x2b, 0xf5, 0x80, 0x1a, 0x1f, 0x01, 0x76, 0x7f, 0x10, 0xbd, 0x81, 0x56, 0x1a, 0xba,
	0x1b, 0x92, 0xe5, 0x9a, 0xd0, 0x91, 0xba, 0xfb, 0xfd, 0x93, 0xbb, 0x43, 0x5c, 0x30, 0x8a, 0x8f,
	0xb2, 0xd5, 0x19, 0x3f, 0x45, 0x50, 0x1f, 0xb2, 0xe5, 0x2a, 0x63, 0x37, 0x22, 0xec, 0x1a, 0x0a,
	0x66, 0x71, 0x89, 0x65, 0x6e, 0x7c, 0xc5, 0x6e, 0x21, 0x63, 0x16, 0xa3, 0x73, 0x90, 0x53, 0x37,
	0xa3, 0xb9, 0x26, 0x31, 0x37, 0xe3, 0x1f, 0x6e, 0xe6, 0x45, 0x29, 0xb2, 0x62, 0x9a, 0x6d, 0x30,
	0x2f, 0x40, 0x3a, 0xb4, 0x83, 0xd8, 0x0b, 0x0b, 0x9f, 0xf8, 0xec, 0x60, 0x6d, 0x7c, 0x9b, 0xa3,
	0x67, 0xa0, 0x78, 0x49, 0x18, 0x12, 0x8f, 0x12, 0x9f, 0xdd, 0xad, 0x8d, 0x77, 0x40, 0xc9, 0xe6,
	0xc5, 0x32, 0x0a, 0x68, 0xc9, 0x36, 0x39, 0x7b, 0x0b, 0xe8, 0xe7, 0x00, 0x3b, 0x33, 0xa4, 0x82,
	0x74, 0x45, 0x36, 0xd5, 0x18, 0x65, 0x58, 0xde, 0xee, 0xda, 0x0d, 0x0b, 0x52, 0x8d, 0xc1, 0x93,
	0x0f, 0xe2, 0xb9, 0x70, 0xf6, 0x4b, 0x84, 0xfd, 0x3b, 0x9f, 0x05, 0xd2, 0xe0, 0x08, 0x4f, 0xe7,
	0xf6, 0x68, 0xe1, 0xcc, 0x06, 0xb3, 0xb9, 0xb3, 0x98, 0xdb, 0x5f, 0xed, 0xe9, 0x77, 0x5b, 0xdd,
	0x43, 0xc7, 0x70, 0x78, 0x8f, 0xf9, 0x32, 0x1d, 0xdb, 0xaa, 0x80, 0x4e, 0xe0, 0x49, 0x0d, 0xb6,
	0x46, 0xaa, 0x58, 0xeb, 0x34, 0x9c, 0x4e, 0x26, 0xd6, 0x70, 0xa6, 0x4a, 0x48, 0x87, 0xa7, 0x7f,
	0x63, 0xac, 0x91, 0xda, 0xa8, 0xb5, 0x73, 0xe6, 0x9f, 0xbe, 0x8d, 0x67, 0xaa, 0x5c, 0x2b, 0xe2,
	0x44, 0x59, 0xd4, 0xac, 0x59, 0x39, 0xf3, 0xe1, 0xd0, 0x72, 0x1c, 0xb5, 0x55, 0x6b, 0xf7, 0x79,
	0x30, 0x9e, 0x58, 0x23, 0xb5, 0x8d, 0x4e, 0xe1, 0xf8, 0x7e, 0x89, 0x65, 0xcf, 0xc6, 0xb6, 0x35,
	0x51, 0x95, 0xbe, 0x07, 0xd2, 0x7c, 0x4d, 0xd1, 0x0b, 0x68, 0x5c, 0x04, 0xf1, 0x0a, 0x3d, 0xaa,
	0xce, 0xcb, 0x5e, 0xae, 0x7e, 0x2f, 0x33, 0xf6, 0xd0, 0x3b, 0x68, 0x3a, 0x34, 0x2b, 0x1f, 0xdd,
	0x89, 0xb9, 0x7d, 0xf4, 0x26, 0x47, 0x30, 0xf9, 0x51, 0x90, 0x9c, 0xea, 0x8f, 0x77, 0x84, 0x75,
	0x4d, 0x62, 0x6a, 0xec, 0xbd, 0x16, 0x96, 0x4d, 0xf6, 0x81, 0xbf, 0xfd, 0x13, 0x00, 0x00, 0xff,
	0xff, 0x47, 0x3c, 0x26, 0x8f, 0x74, 0x04, 0x00, 0x00,
}
